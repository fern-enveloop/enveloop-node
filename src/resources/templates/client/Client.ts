/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { EnveloopApi } from "@fern-api/enveloop";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async get(slug: string): Promise<EnveloopApi.templates.get.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/templates/${slug}`),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.templates.get.Response.parse(_response.body as serializers.templates.get.Response.Raw),
      };
    }

    return {
      ok: false,
      error: EnveloopApi.templates.get.Error._unknown(_response.error),
    };
  }
}
